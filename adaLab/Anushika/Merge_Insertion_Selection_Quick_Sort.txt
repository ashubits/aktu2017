/* This program is for demonstrating Selection, Insertion, Quick and Merge Sort
   in C. This program first generate 10 random numbers. These random numbers
   are then stored in a txt file named as input.txt.
   This input.txt is then taken as input for the program where the first line of
   input.txt is the number of elements and the rest of the numbers are the input
   elements for sorting. As per user selection, the program performs the sortng
   algorithm and writes the output to the output.txt file which in turn contains
   the number of elements and the number of comparisons.

   @author: Anushika Chauhan
   Date of Creation: 25-Sept-2017

*/

#include<stdio.h>
#include <stdlib.h>  /* For exit() function */
# define FILE_NAME "C:\\Users\\hp\\Downloads\\Desktop\\Sorting\\80\\intput.txt"
# define SELECT_SORT_FILE_OUTPUT "C:\\Users\\hp\\Downloads\\Desktop\\Sorting\\80\\select_sort.txt"
# define INSERT_SORT_FILE_OUTPUT "C:\\Users\\hp\\Downloads\\Desktop\\Sorting\\80\\insert_sort.txt"
# define MERGE_SORT_FILE_OUTPUT "C:\\Users\\hp\\Downloads\\Desktop\\Sorting\\80\\merge_sort.txt"
# define QUICK_SORT_FILE_OUTPUT "C:\\Users\\hp\\Downloads\\Desktop\\Sorting\\80\\quick_sort.txt"

int globalComparison = 0;
int checkComparison(int a, int b, int equal){
    globalComparison++;
        if(equal == 0){
            if(a > b){
                return 1;
            }
            else{
                return 0;
            }
        }else if(equal == 1){
            if(a >= b){
                return 1;
            }
            else{
                return 0;
            }
        }
}
void writeOutputToFile(int inputArray[], int count, int fileCheckFlag, int comparisons){
    FILE *fptr;

     if(fileCheckFlag == 0){
        fptr = fopen(FILE_NAME, "w");
     }else if(fileCheckFlag == 1){
        fptr = fopen(SELECT_SORT_FILE_OUTPUT, "w");
     }else if(fileCheckFlag == 2){
        fptr = fopen(INSERT_SORT_FILE_OUTPUT, "w");
     }else if(fileCheckFlag == 3){
        fptr = fopen(MERGE_SORT_FILE_OUTPUT, "w");
     }else if(fileCheckFlag == 4){
        fptr = fopen(QUICK_SORT_FILE_OUTPUT, "w");
     }
     if(fptr == NULL)
     {
      printf("Error!");
      exit(1);
     }
     if(fileCheckFlag == 0){
        for(int i = 0; i < count; i++){
            fprintf(fptr,"%d\n", inputArray[i]);
        }
     }else{
        fprintf(fptr,"%s", "Total No of Elements = ");
        fprintf(fptr,"%d\n", count);
        fprintf(fptr,"%s", "Total No of Comparisons = ");
        fprintf(fptr,"%d\n", comparisons);
        fprintf(fptr,"%s", "Sorted Array = ");
        for(int i = 0; i < count; i++){
            fprintf(fptr,"%d ", inputArray[i]);
        }
     }
     fclose(fptr);
}
//------------------INSERTION SORT STARTS--------------------------//
void insertionSort(int list[], int count) {
      int k;
      for (int i = 1; i < count; i++) {
         /** insert list[i] into a sorted sublist list[0..i-1] so that
               list[0..i] is sorted. */
          int currentElement = list[i];
          //int k;
          //for (k = i - 1; k >= 0 && list[k] > currentElement; k--) { //previous running code
          for (k = i - 1; k >= 0 && checkComparison(list[k] , currentElement, 0); k--) {
                list[k + 1] = list[k];
                //globalComparison++;
         }

         // Insert the current element into list[k+1]
         list[k + 1] = currentElement;
      }
      writeOutputToFile(list, count, 2, globalComparison);
}
//-------------------------INSERTION SORT ENDS---------------------//


//--------------------------MERGE SORT STARTS------------------------//
 /** Merge two sorted lists */
 void merge(int list1[], int list1_length, int list2[],int list2_length, int temp[]) {
    int current1 = 0; // Current index in list1
    int current2 = 0; // Current index in list2
    int current3 = 0; // Current index in temp

    while (current1 < list1_length && current2 < list2_length) {
      //if (list1[current1] < list2[current2]){ //previous running code
        if(checkComparison(list2[current2], list1[current1], 0)){
        temp[current3++] = list1[current1++];
        //globalComparison++;
      }
      else
        temp[current3++] = list2[current2++];
    }

    while (current1 < list1_length)
      temp[current3++] = list1[current1++];

    while (current2 < list2_length)
      temp[current3++] = list2[current2++];

  }

/** The method for sorting the numbers */
 void mergeSort(int list[], int count) {
    if (count > 1) {
      // Merge sort the first half
     // int[] firstHalf = new int[list.length / 2];
      int firstHalf[count/2];
      //System.arraycopy(list, 0, firstHalf, 0, list.length / 2);
      for(int i = 0; i < count/2; i++){
                firstHalf[i] = list[i];
      }
      printf("\nFirstHalf\n");
      for(int i = 0; i < count/2; i++){
                printf("%d ", firstHalf[i]);
      }
      mergeSort(firstHalf, count/2);

      // Merge sort the second half
      int secondHalfLength = count - count / 2;
      //int[] secondHalf = new int[secondHalfLength];
      int secondHalf[secondHalfLength];
      //System.arraycopy(list, list.length / 2, secondHalf, 0, secondHalfLength);
      int j = 0;
      for(int i = count/2; i < count; i++){
                secondHalf[j] = list[i];
                j++;
      }
      printf("\nSecondHalf\n");
      for(int i = 0; i < secondHalfLength; i++){
                printf("%d ", secondHalf[i]);
      }
      mergeSort(secondHalf, secondHalfLength);

      // Merge firstHalf with secondHalf into list
      int list1_length = sizeof( firstHalf ) / sizeof( firstHalf[0] );
      int list2_length = sizeof( secondHalf ) / sizeof( secondHalf[0] );
      merge(firstHalf, list1_length, secondHalf, list2_length, list);
    }
    writeOutputToFile(list, count, 3, globalComparison);
  }
  //----------------MERGE SORT ENDS---------------------------//

  //----------------QUICK SORT STARTS------------------------//

    /** Partition the array list[first..last] */
 int partition2(int list[], int first, int last) {
    int pivot = list[first]; // Choose the first element as the pivot
    int low = first + 1; // Index for forward search
    int high = last; // Index for backward search

    while (high > low) {
      // Search forward from left
      //while (low <= high && list[low] <= pivot){ //previous running code
      while(low <= high && checkComparison(pivot, list[low], 1)){
        low++;
        //globalComparison++;
      }
      // Search backward from right
      //while (low <= high && list[high] > pivot){      //previous running code
      while (low <= high && checkComparison(list[high], pivot, 0)){
        high--;
        //globalComparison++;
      }
      // Swap two elements in the list
      if (high > low) {
        int temp = list[high];
        list[high] = list[low];
        list[low] = temp;
      }
    }

    //while (high > first && list[high] >= pivot){  //previous running code
    while (high > first && checkComparison(list[high], pivot, 1)){
      high--;
      //globalComparison++;
    }
    // Swap pivot with list[high]
    //if (pivot > list[high]) {     //previuos running code
    if (checkComparison(pivot, list[high], 0)) {
      list[first] = list[high];
      list[high] = pivot;
      //globalComparison++;
      return high;
    }
    else {
      return first;
    }
  }
  
  int partition(int list[], int first, int last){
        int x = list[last];
        int i = first - 1;
        int temp = 0;
        
        for(int j = first; j <= last - 1; j++){
            //if(list[j] <= x){         //checkComparison(pivot, list[low], 1)
            if(checkComparison(x, list[j], 1)){
                 i = i + 1;
                 //exchange A[i] with A[j];
                 temp = list[i];
                 list[i] = list[j];
                 list[j] = temp;
            }
        }
        //exchange A[i+1] with A[r]
        temp = list[i+1];
        list[i+1] = list[last];
        list[last] = temp;
        return (i+1);
  }

  void quickSort(int list[], int first, int last) {
    if (last > first) {
      int pivotIndex = partition(list, first, last);
      quickSort(list, first, pivotIndex - 1);
      quickSort(list, pivotIndex + 1, last);
      //return (last - first - 1);
    }
  }

  void quickSort(int list[], int count) {
    //int comparisons = quickSort(list, 0, count - 1);
    quickSort(list, 0, count - 1);
    writeOutputToFile(list, count, 4, globalComparison);
  }

//-------------------------QUICK SORT ENDS----------------------------//

//------------------------SELECTION SORT STARTS----------------------//
 void selectionSort2(int list[], int count){
    int position, swap;
     for (int c = 0 ; c < ( count - 1 ) ; c++ )
    {
        position = c;

        for (int d = c + 1 ; d < count ; d++ )
        {
            if ( list[position] > list[d] ){
                position = d;
                globalComparison++;
            }
        }
        if ( position != c )
        {
            swap = list[c];
            list[c] = list[position];
            list[position] = swap;
        }
     } //
    // int comparisons = (count * (count - 1)) / 2;
     writeOutputToFile(list, count, 1, globalComparison);
  }

  void selectionSort(int list[], int count) {
    for (int i = 0; i < count - 1; i++) {
      // Find the minimum in the list[i..list.length-1]
      int currentMin = list[i];
      int currentMinIndex = i;

      for (int j = i + 1; j < count; j++) {
       // if (currentMin > list[j]) { //previous working code
        if(checkComparison(currentMin, list[j], 0)){
          currentMin = list[j];
          currentMinIndex = j;
          //globalComparison++;
        }
      }

      // Swap list[i] with list[currentMinIndex] if necessary;
      if (currentMinIndex != i) {
        list[currentMinIndex] = list[i];
        list[i] = currentMin;
      }
    }
    writeOutputToFile(list, count, 1, globalComparison);
  }
//------------------------SELECTION SORT ENDS------------------------//
void readInputFromFile(int count, int fileCheckFlag){
    FILE *inFile;
    int inputArray[count];
    int inputArray2[count];
    int inputArray3[count];
    int inputArray4[count];
    int data;
    int i = 0;
    int status;
    inFile = fopen(FILE_NAME, "r");
    if(fileCheckFlag == 0){
        inFile = fopen(FILE_NAME, "r");
     }else if(fileCheckFlag == 1){
        inFile = fopen(SELECT_SORT_FILE_OUTPUT, "r");
     }else if(fileCheckFlag == 2){
        inFile = fopen(INSERT_SORT_FILE_OUTPUT, "r");
     }else if(fileCheckFlag == 3){
        inFile = fopen(MERGE_SORT_FILE_OUTPUT, "r");
     }else if(fileCheckFlag == 4){
        inFile = fopen(QUICK_SORT_FILE_OUTPUT, "r");
     }
    while(1){
        status = fscanf(inFile, "%d", &data);
        if(status == EOF)
            break;
        printf("%d ", data);
        //scanf("%d", &inputArray[i]);
        inputArray[i] = data;
        inputArray2[i] = data;
        inputArray3[i] = data;
        inputArray4[i] = data;
        i++;
    }
    fclose(inFile);
    printf("Data in Array\n");
    for(int j = 0;  j < count;  j++){
        printf("%d ", inputArray[j]);
    }
    printf("\n");
   insertionSort(inputArray, count);
   globalComparison = 0;
   mergeSort(inputArray2, count);
   globalComparison = 0;
   quickSort(inputArray3, count);
   globalComparison = 0;
   selectionSort(inputArray4, count);
}
void numberOFElements(){
    FILE *inFile;
    int count  = 0;
    int data;
    int status;
    inFile = fopen(FILE_NAME, "r");
    while(1){
        status = fscanf(inFile, "%d", &data);
        if(status == EOF)
            break;
        count = count + 1;
    }
    fclose(inFile);
    printf("\n");

    readInputFromFile(count, 0);
}
void generateRandomNumbers(){
    int c, n, i = 0;
    int limitCounter = 80;
    int inputArray[limitCounter];
    for (c = 1; c <= limitCounter; c++) {
        n = rand() % 100 + 1;
        //printf("%d\n", n);
        inputArray[i] = n;
        i++;
    }
    writeOutputToFile(inputArray, limitCounter, 0, 0);
}
void main(){
       generateRandomNumbers();
       numberOFElements();
}